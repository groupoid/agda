# Syntax rules for Groupoid Infinity cubical base library

context default

    keyword whole \[\-\.0123456789(\)]%  brightred
    keyword whole unknown brightred

    keyword [ lightgray
    keyword || lightgray
    keyword | lightgray
    keyword ] lightgray
    keyword ( lightgray
    keyword ) lightgray
    keyword { lightgray
    keyword } lightgray
    keyword - lightgray
    keyword > lightgray
    keyword < lightgray
    keyword : gray
    keyword = gray

# cubicaltt syntax

    keyword whole mutual brown
    keyword whole data brown
    keyword whole hdata brown
    keyword whole transport brown
    keyword whole fill brown
    keyword whole comp brown
    keyword whole Glue brown
    keyword whole glue brown
    keyword whole unglue brown
    keyword whole split brown
    keyword whole import brown
    keyword whole module brown
    keyword whole where brown
    keyword whole let brown
    keyword whole undefined brown
    keyword whole case brown
    keyword whole in brown
    keyword whole U brown

# Process calculus syntax

    keyword whole receive brown
    keyword whole execute brown
    keyword whole process brown
    keyword whole spawn brown
    keyword whole send brown

# Arend syntax

    keyword whole Type brown
    keyword whole coe brown
    keyword whole func brown
    keyword whole record brown
    keyword whole class brown
    keyword whole new brown
    keyword whole elim brown

# Agda syntax

    keyword whole open brown
    keyword whole public brown
    keyword whole field brown
    keyword whole syntax brown
    keyword whole infixl brown
    keyword whole infixr brown
    keyword whole infix brown
    keyword whole using brown
    keyword whole renaming brown
    keyword whole postulate brown
    keyword whole to brown

# Known constructors

    keyword whole nat     cyan
    keyword whole cons    cyan
    keyword whole nil     cyan
    keyword whole zero    cyan
    keyword whole one     cyan
    keyword whole seg     cyan
    keyword whole base    cyan
    keyword whole loop    cyan
    keyword whole succ    cyan
    keyword whole false   cyan
    keyword whole true    cyan
    keyword whole fsucc   cyan
    keyword whole fzero   cyan
    keyword whole vsucc   cyan
    keyword whole vzero   cyan

# Known polymorphic functions and types

    keyword whole \\      magenta
    keyword whole app     magenta
    keyword whole lam     magenta
    keyword whole lambda  magenta
    keyword whole apply   magenta
    keyword whole pair    magenta
    keyword whole pr1     magenta
    keyword whole pr2     magenta
    keyword whole pr2     magenta
    keyword whole refl    magenta
    keyword whole sym     magenta
    keyword whole trans   magenta
    keyword whole contr   magenta
    keyword whole ap      magenta
    keyword whole cong    magenta
    keyword whole subst   magenta
    keyword whole J       magenta
    keyword whole singl   magenta
    keyword whole eta     magenta

    keyword whole integer magenta
    keyword whole stream  magenta
    keyword whole list    magenta
    keyword whole either  magenta
    keyword whole empty   magenta
    keyword whole unit    magenta
    keyword whole tuple   magenta
    keyword whole bool    magenta
    keyword whole functor magenta
    keyword whole category magenta
    keyword whole pure    magenta
    keyword whole applicative magenta
    keyword whole monad    magenta
    keyword whole prop     magenta
    keyword whole groupoid magenta
    keyword whole set     magenta
    keyword whole isContr magenta
    keyword whole isProp  magenta
    keyword whole isGroupoid magenta
    keyword whole isSet   magenta
    keyword whole Sigma   magenta
    keyword ()            magenta
    keyword []            magenta
    keyword whole Pi      magenta
    keyword whole Id      magenta
    keyword whole Equ     magenta
    keyword whole Path    magenta
    keyword whole PathP   magenta
    keyword whole HPath   magenta

context exclusive {\- \-} lightgray
    spellcheck
context exclusive -- \n lightgray
